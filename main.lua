-- FILE GENERATED BY JOKER FORGE
-- ** If you find any bugs, or have suggestions, please report them on the GitHub repository: https://github.com/Jayd-H/joker-forge/issues **

-- Atlas
SMODS.Atlas({
    key = "CustomJokers", 
    path = "CustomJokers.png", 
    px = 71,
    py = 95, 
    atlas_table = "ASSET_ATLAS"
}):register()

SMODS.Joker{ --tnirpeulB
    name = "tnirpeulB",
    key = "tnirpeulb",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'tnirpeulB',
        ['text'] = {
            [1] = 'Copies ability of {C:attention}Joker{} to the left'
        }
    },
    pos = {
        x = 0,
        y = 0
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        local target_joker = nil
        
        local my_pos = nil
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == card then
                my_pos = i
                break
            end
        end
        target_joker = (my_pos and my_pos > 1) and G.jokers.cards[my_pos - 1] or nil
        
        return SMODS.blueprint_effect(card, target_joker, context)
    end
}

SMODS.Joker{ --Switch 2
    name = "Switch 2",
    key = "switch2",
    config = {
        extra = {
            repetitions = 1
        }
    },
    loc_txt = {
        ['name'] = 'Switch 2',
        ['text'] = {
            [1] = '{C:orange}Retrigger{} all {C:orange}Lucky Cards{}'
        }
    },
    pos = {
        x = 1,
        y = 0
    },
    cost = 5,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if SMODS.get_enhancements(context.other_card)["m_lucky"] == true then
                return {
                    repetitions = card.ability.extra.repetitions,
                    message = localize('k_again_ex')
                }
            end
        end
    end
}

SMODS.Joker{ --Pride
    name = "Pride",
    key = "pride",
    config = {
        extra = {
            mult = 18
        }
    },
    loc_txt = {
        ['name'] = 'Pride',
        ['text'] = {
            [1] = 'Played {C:orange}Wild Cards{} give {C:mult}+28{} Mult when scored'
        }
    },
    pos = {
        x = 2,
        y = 0
    },
    cost = 5,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if SMODS.get_enhancements(context.other_card)["m_wild"] == true then
                return {
                    mult = card.ability.extra.mult
                }
            end
        end
    end
}

SMODS.Joker{ --Oops! the game crashed.
    name = "Oops! the game crashed.",
    key = "oopsthegamecrashed",
    config = {
        extra = {
            odds = 4
        }
    },
    loc_txt = {
        ['name'] = 'Oops! the game crashed.',
        ['text'] = {
            [1] = '{C:green}1 in 4{} chance to prevent death.'
        }
    },
    pos = {
        x = 3,
        y = 0
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.end_of_round and context.game_over and context.main_eval and not context.blueprint then
            if G.GAME.chips / G.GAME.blind.chips <= 0.01 then
                if pseudorandom('group_0_3d41b659') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({saved = true}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = localize('k_saved_ex'), colour = G.C.RED})
                    end
            end
        end
    end
}

SMODS.Joker{ --teluobirT
    name = "teluobirT",
    key = "teluobirt",
    config = {
        extra = {
            Xmult = 2
        }
    },
    loc_txt = {
        ['name'] = 'teluobirT',
        ['text'] = {
            [1] = 'Played Jacks and Aces each give {X:red,C:white}X2{} Mult when scored'
        }
    },
    pos = {
        x = 4,
        y = 0
    },
    cost = 20,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if (context.other_card:get_id() == 11 or context.other_card:get_id() == 14) then
                return {
                    Xmult = card.ability.extra.Xmult
                }
            end
        end
    end
}

SMODS.Joker{ --Hearthead
    name = "Hearthead",
    key = "hearthead",
    config = {
        extra = {
            chips = 50
        }
    },
    loc_txt = {
        ['name'] = 'Hearthead',
        ['text'] = {
            [1] = 'Played cards with {C:red}Heart{} suit give {C:chips}+50{} Chips when scored'
        }
    },
    pos = {
        x = 5,
        y = 0
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if context.other_card:is_suit("Hearts") then
                return {
                    chips = card.ability.extra.chips
                }
            end
        end
    end
}

SMODS.Joker{ --Glass Spear
    name = "Glass Spear",
    key = "glassspear",
    config = {
        extra = {
            chips = 50
        }
    },
    loc_txt = {
        ['name'] = 'Glass Spear',
        ['text'] = {
            [1] = 'Played cards with {C:money}Diamond{} suit give {C:chips}+50{} Chips when scored'
        }
    },
    pos = {
        x = 6,
        y = 0
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if context.other_card:is_suit("Diamonds") then
                return {
                    chips = card.ability.extra.chips
                }
            end
        end
    end
}

SMODS.Joker{ --Clover Edge
    name = "Clover Edge",
    key = "cloveredge",
    config = {
        extra = {
            chips = 50
        }
    },
    loc_txt = {
        ['name'] = 'Clover Edge',
        ['text'] = {
            [1] = 'Played cards with {C:green}Club{} suit give {C:chips}+50{} Chips when scored'
        }
    },
    pos = {
        x = 7,
        y = 0
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if context.other_card:is_suit("Clubs") then
                return {
                    chips = card.ability.extra.chips
                }
            end
        end
    end
}

SMODS.Joker{ --mrotsniarB
    name = "mrotsniarB",
    key = "mrotsniarb",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'mrotsniarB',
        ['text'] = {
            [1] = 'Copies the ability of rightmost {C:attention}Joker{}'
        }
    },
    pos = {
        x = 8,
        y = 0
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        local target_joker = nil
        
        target_joker = G.jokers.cards[1]
        if target_joker == card then
            target_joker = nil
        end
        
        return SMODS.blueprint_effect(card, target_joker, context)
    end
}
